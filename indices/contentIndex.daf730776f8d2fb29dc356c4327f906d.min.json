{"/":{"title":"Pico Workshop","content":"\n\u003cimg src=\"/notes/images/pico8_postcard.png\" alt=\"pico8\" width=\"380\"/\u003e\n\nHomepage for the Creative Coding workshop for teenagers taught by [Souren](https://www.sourencho.com/) in Paris, February 2023.\n\nOutcome\n- [[notes/OurCreations/Our Creations]]\n\nTutorials\n- [[notes/Tutorials/1. Intro to Pico-8]]\n- [[notes/Tutorials/2. Getting started with Pico-8]]\n- [[notes/Tutorials/3. Text, Lines, Shapes and Colors]]\n- [[notes/Tutorials/4. Animating with Sin \u0026 Cos]]\n- [[notes/Tutorials/5. Color by Position]]\n- [[notes/Tutorials/6. Particles]]\n- [[notes/Tutorials/7. Useful Pico-8 Features]]\n\nMaterials\n- [[notes/Misc/Cheatsheet]]\n- [[notes/Misc/Resources]]\n- [[notes/Misc/Examples]]","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Misc/About":{"title":"About","content":"\nThis site is the homepage for the Creative Coding workshop held at [TUMO Paris](https://paris.tumo.fr) from Feb 27 to Mar 3 in 2023. The workshop was taught by [Souren Papazian](https://www.sourencho.com/) with help from *todo*.\n\nThe materials here were used as a guide for teaching during the workshop and as a reference for the students afterwards.\n\nYou can browse the outcome of the workshop on this page: [[notes/OurCreations/Our Creations]]!\n","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Misc/Cheatsheet":{"title":"","content":"![[notes/images/PICO-8_Cheat-Sheet_0-9-2.png]]","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Misc/Examples":{"title":"Examples","content":"\n- Tweetcarts!\n\t-  [https://twitter.com/search?q=%23tweetcart](https://twitter.com/search?q=%23tweetcart)\n\t-  [https://museum-of-tweetcart-history.neocities.org/](https://museum-of-tweetcart-history.neocities.org/)\n- Pico-8 Artists\n\t- [Munro's Tweetcarts](https://www.lexaloffle.com/bbs/?tid=39199)\n\t- [Game Dev Brook's Tweetcarts](https://gamedevbrook.itch.io/tweetcart-showcase)\n\t- [@carsonk's Pico-8 Art](https://carsonk.net/works/art/)\n\t- [@alexthescott'sPico-8 Art](https://alexthescott.space/pages/art.html)\n\t- [@aebrer's pico_galaxies](https://www.teia.art/pico_galaxies)","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Misc/Ideas":{"title":"Ideas","content":"","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Misc/Palette-Maker":{"title":"Palette Maker","content":"\nYou can use this tool to make new palettes that you copy past at the top of your code.\n\n\u003ciframe src=\"https://www.lexaloffle.com/bbs/widget.php?pid=palette_maker\" allowfullscreen width=\"621\" height=\"513\" style=\"border:none; overflow:hidden\"\u003e\u003c/iframe\u003e\n\nFrom https://www.lexaloffle.com/bbs/?pid=palette_maker#p","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Misc/Resources":{"title":"Resources","content":"\nPico-8 Resources\n- Handy\n\t- [[notes/Misc/Cheatsheet]]\n\t- [[notes/Misc/Palette Maker]]\n\t- https://nerdyteachers.com/PICO-8/Guide/\n- Lua\n\t- [Demoman: Intro to Lua](https://demoman.net/?a=intro-to-lua)  \n- Other\n\t- [Lexaloffle: PICO-8 Resources](https://www.lexaloffle.com/pico-8.php?page=resources)\n\t- [Lexaloffle: PICO-8 Manual](https://www.lexaloffle.com/pico8_manual.txt)\n\t- [Wiki: API Reference](https://pico-8.fandom.com/wiki/APIReference)\n\t- [Nerdy Teachers: PICO-8 Guide](https://nerdyteachers.com/PICO-8/Guide/)\n\t- [cheatsheet (site)](https://neko250.github.io/pico8-api/)\n\nTweetcart Resources\n-   Tutorials\n    - [https://demobasics.pixienop.net/tweetcarts/](https://demobasics.pixienop.net/tweetcarts/)\n    - [https://rexcellentgames.com/minifying-tweetcarts/](https://rexcellentgames.com/minifying-tweetcarts/)\n    - [https://demoman.net/?a=optimizing-for-tweetcarts](https://demoman.net/?a=optimizing-for-tweetcarts)\n-   Misc\n    -   [http://www.sizecoding.org/wiki/PICO-8](http://www.sizecoding.org/wiki/PICO-8)\n    -   [Sizecoding Discord](https://discord.gg/pZE5rAQrHx)\n    -   [https://github.com/pico-8/awesome-PICO-8](https://github.com/pico-8/awesome-PICO-8)\n-   Archive\n    -   [Google Drive: PICO-8 Tweetcart Archive](https://drive.google.com/drive/folders/1V7N4nXfsJRM1ZSU3NuCsUBIwFf0PdwCO)","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/OurCreations/Our-Creations":{"title":"Our Creations","content":"\u003cstyle\u003e\ntable, tr, td, th {\n    border: none;\n}\n\u003c/style\u003e\n\nVisuals created during the workshop!\n\n|       |  |\n| ----------- | ----------- |\n| ![[notes/creations/julien/balles color√©es.gif]]\u003cbr\u003eBalles Colores\u003cbr\u003e*Julien*      |  ![[notes/creations/cyprien/boids.gif]] \u003cbr\u003eBoids\u003cbr\u003e*Cyprien*       |\n| ![[notes/creations/samantha/rainbow.gif]]\u003cbr\u003eRainbow\u003cbr\u003e*Samantha*| ![[notes/creations/maxim/SunEarthMoon.gif]]\u003cbr\u003eSun Earth Moon\u003cbr\u003e*Maxim*        |\n| ![[notes/creations/emile_2/waves.gif]]\u003cbr\u003eWaves\u003cbr\u003e*Emile*   | ![[notes/creations/leon/sun.gif]]\u003cbr\u003eSun\u003cbr\u003e*L√©on*        |\n| ![[notes/creations/lubin/kamehameha.gif]]\u003cbr\u003eKamehameha\u003cbr\u003e*Lubin*   | ![[notes/creations/assia/reverse.gif]]\u003cbr\u003eReverse\u003cbr\u003e*Assia*        |\n| ![[notes/creations/henri/RainbowCircles.gif]]\u003cbr\u003eRainbow Circles\u003cbr\u003e*Henri-Christian*   | ![[notes/creations/graig/colorful_circles.gif]]\u003cbr\u003eColorful Circles\u003cbr\u003e*Graig*        |\n| \n![[notes/creations/anton/ball with circle anton.gif]]\u003cbr\u003eBall with Circle\u003cbr\u003e*Anton*   | ![[notes/creations/dorian/looping_circles.gif]]\u003cbr\u003eLooping Circles\u003cbr\u003e*Dorian*        |\n| ![[notes/creations/come/fireball.gif]]\u003cbr\u003eFireball\u003cbr\u003e*C√¥me*   | ![[notes/creations/evan/wave_evan.gif]]\u003cbr\u003eWave\u003cbr\u003e*Evan*        |\n| ![[notes/creations/cyprien/wave.gif]]\u003cbr\u003eWave\u003cbr\u003e*Cyprien*   | ![[notes/creations/assia/cells.gif]]\u003cbr\u003eCells\u003cbr\u003e*Assia*        |\n| ![[notes/creations/cyprien/circles.gif]]\u003cbr\u003eCircles\u003cbr\u003e*Cyprien*   | ![[notes/creations/maxim/gears.gif]]\u003cbr\u003eGears\u003cbr\u003e*Maxim*        |\n| ![[notes/creations/come/expload.gif]]\u003cbr\u003eExplode\u003cbr\u003e*C√¥me*   | ![[notes/creations/cyprien/sky.gif]]\u003cbr\u003eSky\u003cbr\u003e*Cyprien*        |\n| ![[notes/creations/dorian/spray.gif]]\u003cbr\u003eSpray\u003cbr\u003e*Dorian*   | ![[notes/creations/dorian/rainbow2.gif]]\u003cbr\u003eRainbow\u003cbr\u003e*Dorian*        |\n| ![[notes/creations/emile_2/fireball.gif]]\u003cbr\u003eFireball\u003cbr\u003e*Emile*   | ![[notes/creations/leon/burn.gif]]\u003cbr\u003eBurn\u003cbr\u003e*L√©on*        |\n| ![[notes/creations/graig/bloom-gif.gif]]\u003cbr\u003eBloom\u003cbr\u003e*Graig* | ![[notes/creations/graig/cyclop_gif.gif]]\u003cbr\u003eCyclop\u003cbr\u003e*Graig* |\n| ![[notes/creations/henri/lines.gif]]\u003cbr\u003eLines\u003cbr\u003e*Henri-Christian* |  ![[notes/creations/julien/4 balls around the rainbow.gif]]\u003cbr\u003eAround the Rainbow\u003cbr\u003e*Julien* |\n| ![[notes/creations/lubin/Star road.gif]]\u003cbr\u003eStar Road\u003cbr\u003e*Lubin* | ![[notes/creations/maxim/rainbowshuriken.gif]]\u003cbr\u003eRainbow Shuriken\u003cbr\u003e*Maxim*        |\n| ![[notes/creations/maxim/meteor.gif]]\u003cbr\u003eMeteor\u003cbr\u003e*Maxim*   | ![[notes/creations/samantha/spincirc.gif]]\u003cbr\u003eSpin Circ\u003cbr\u003e*Samantha*        |\n| ![[notes/creations/julien/the_cataclysm.gif]]\u003cbr\u003eThe Cataclysm\u003cbr\u003e*Julien*  |![[notes/creations/lubin/starexplosiongif.gif]]\u003cbr\u003eStar Explosion\u003cbr\u003e*Lubin*        |\n| ![[notes/creations/samantha/fairrial lights.gif]]\u003cbr\u003eFeral Lights\u003cbr\u003e*Samantha*| ![[notes/creations/samantha/solar system.gif]]\u003cbr\u003eSolar System\u003cbr\u003eSamantha |\n| | ![[notes/creations/maxim/GPTs_GoLgif.gif]]\u003cbr\u003eGPTs GoL\u003cbr\u003e*Maxim*|\n\n\n‚Äã‚Äã‚Äã\n\n\n\n\n\n\n\n\n\n\n\n\n\n","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/OurCreations/content/wind.p8":{"title":"wind.p8","content":"\n![[notes/OurCreations/gifs/sourencho_wind_0.gif]]\n\nCredit\n- sourencho\n- February 2022\n\nLink\n\nhttps://www.pico-8-edu.com/?c=AHB4YQENAPkC4EeEyyukxiwGBiYwZnBmcUdRRMGtxwYGRkFHh1FHR2GMbQ4FJkUBrkfGRSZHJkfB7E0OJK0HhsUNhOxNIcGsB04lTSEhryemBSXtxU1FJkUhQa5nLk4O4BGWT9h-ifnCDi9x0NlP8Azl7UeUzzA09BRt_QCv4MXro7g-JYw3jjloIEuawjDp6TcddNVJgWbIVVelfd5aYcsqgZVWhq6fOX9mSGLgIZbyWElkMBsakQ8ZG3uJcqjspyZarZEJlYB4xhuFGsEzTIw8QTd02lCRlDtN1Ew0e3sbG_lEmJkjrqd2FicmHqIdyR5hdK246nEq\u0026g=w-w-w-w1HQHw-w2Xw-w3Xw-w2HQH\n\nCode\n\n```lua\n?\"\\^!5f100‚ñí1‚¨áÔ∏è3‚¨ÖÔ∏è;‚åÇ\"\nn=600\n::üòê::\ncls(0)\np=2.2929\nfor i=0,n do\n\tf=p*i\n\ty=1-(i/n*2)\n\tr=sqrt(1-y*y)\n\tx=cos(f)*r\n\tz=sin(f)*r\n\tb=(x+z*1.3)+3.3\n\tb=b^5/700\n\tx=64+x*30\n\ty=64+y*30\n\tsrand(i)\n\tu=4*sin(t()/3)+3\n\tv=5*abs(cos(rnd()+t()))\n\tline(x,y,x+u,y+v,1.5*(b+1))\nend\nflip()\ngoto üòê\n```","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Tutorials/1.-Intro-to-Pico-8":{"title":"1. Intro to Pico-8","content":"\n## Intro\n\nWe will be making visuals in Pico-8. It's a fantasy console for making, sharing and playing tiny games and other computer programs.\n\nPico-8 has some limitations like a console would have:\n- 128x128 pixel display\n- 16 colors\n- Lua coding\n\nLuckily, Pico-8 can be run in your browser for free at [pico-8.edu.com](https://www.pico-8-edu.com/)!\n\n![[notes/images/pico8_edu_release.gif]]\n\n## Examples\n\nPeople make some really cool visuals and games in Pico-8!\n\n- Homepage: [www.lexaloffle.com/pico-8.php](https://www.lexaloffle.com/pico-8.php)\n- Demos: `INSTALL_DEMOS`\n- BBS: [Lines](https://www.lexaloffle.com/bbs/?pid=64653#p)\n- Celeste:  `LOAD #15133`\n- Tweetcarts: https://twitter.com/search?q=%23tweetcart\n\n\n## Demo\n\nI'll show you a quick visual made with math!\n\n1. Draw a sprite\n   \n   ![[notes/images/editors.png]]\n2. Write some code\n\n```lua\nfunction _draw()\n\tcls()\n\tfor i=0,15 do\n\t\tx=64+cos(t()/4+i/16)*40\n\t\ty=64+sin(t()/6+i/16)*40\n\t\tspr(1,x,y)\n\tend\n\n\ts = \"‚òÖ picoworkshop.xyz ‚òÖ\"\n\tprint(s, 64-#s*2, 64, 14)\n\nend\n```\n3. Save \u0026 Share\n   \n   `SAVE @URL`\n   \n   https://www.pico-8-edu.com/?c=AHB4YQCpAJtnv8L9Z7-C8S8Q7Z59_iOc-g5HXLG0lD-BM9hkom-zgdvuOeago7KNsu_Dh0jPOuuijXBiZaqYOSoMR5qJNjupW3HGSzgnLtecFTpfzTss5fHSSJHKCjxBOjQUDMVLS8VBT5QMTGxt7RUj79A_QxSetjLyFnXeT0yU_cLI4NLCUDw1dttd2d5xRhgty8FyciMQDwA=\u0026g=w-w-QrQrw-wrHQHQLDLQLDLw-wsXg7Ew-wsXg7Ew-wrHQHQbObObw-wxrerw-wy7C\n   \n   or\n   \n   `CTR+7` \u0026 `SAVE DEMO.P8.PNG`\n   \n   ![[notes/images/demo.p8.png]]\n\n## Next\n\n‚≠êÔ∏è [[notes/Tutorials/2. Getting started with Pico-8]]\n","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Tutorials/2.-Getting-started-with-Pico-8":{"title":"2. Getting started with Pico-8","content":"\n‚≠êÔ∏è In this tutorial we will learn how to use Pico-8!\n\n## Boot and Navigate\n\nOpen [pico-8-edu.com](https://www.pico-8-edu.com/) and start trying out commands:\n\n1. Create a cart\n   \n   Run\n   `SAVE FIRST.P8`\n   \n2. Show you all your carts\n\n   Run `LS` \n\n3. Open your cart editor and write code\n   \n   Press  `[ESC]` and type in `PRINT(\"HELLO WORLD!\")`\n\n5. Run your cart\n   \n   Press `[CTRL]` + `[R]`\n\n6. Install demos and load those carts\n   \n   Run `INSTALL_DEMOS` and then `LS` to see the new folder DEMOS\n   \n   Run `LS DEMOS/` to see what's in there.\n   \n   Pick one and load it as the current cart via `LOAD DEMOS/JELPI.P8`\n   \n   Try running it with `RUN`\n   \n   Check out the code and sprites by pressing `[ESC]`\n\n\nAll of this is in the [[notes/Misc/Cheatsheet]] so don't worry about memorizing it!\n\n## Next\n\n‚≠êÔ∏è [[notes/Tutorials/3. Text, Lines, Shapes and Colors]]","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Tutorials/3.-Text-Lines-Shapes-and-Colors":{"title":"3. Text, Lines, Shapes \u0026 Color","content":"\n‚≠êÔ∏è In this tutorial we will learn to draw simple shapes and colors~\n\n![[notes/images/zep_bear_tweetcart.gif]]\n*[bear tweetcart by zep.p8](https://twitter.com/lexaloffle/status/1404501928701169664)  [(@URL)](https://www.pico-8-edu.com/?c=AHB4YQDlALanBCcXQfwAD3D94fNnPMQxp99y_SHRGc39j5CeUw1k4fGHNfc-QpI3cdC9RXDWWU2dbDQLSdK8RtJ1VWOIymwbUZNclpSNVZrmsC4xQyoSFqkGdG6sosu6JCo6Z1TyQUEbbPRTE9dMjAy0-UrYrexoinUbA3fFZ01Ed4XvUGyd1SZWWFjosjaxQ9VVyd4zbOgGb_kGPUSz_QYro3l4fv8Atf1Gm7SLHmFsphhbXgQ=\u0026g=w-w-w-w1HQHw-w2Xw-w3Xw-w2HQH)*\n\n## Hello Circle\n\nPico-8 has a special function `_draw` that executes over and over\n\nLet's try to draw a circle using this function\n\n```lua\nfunction _draw()\n  -- clear screen\n  cls()\n\n  -- circfill( x, y, radius, color )\n  circfill(64, 64, 6, 12)\nend\n```\n\nThe screen is 128x128 pixels and the X and Y values flow right and down. \n\nTo pick a color use a number.\n\n\u003cimg src=\"/notes/images/color_reference.png\" alt=\"colors\" width=\"300\"/\u003e\n\n![[notes/images/circfill.gif]]\n\n\n## Move things around!\n\nThere is another special function `_init` that is executes once at the start.\n\nLet's define a variable `x` there and then make `x` bigger every time in draw to move the circle.\n\n```lua\nfunction _init()\n\tx = 10\nend\n\nfunction _draw()\n  -- clear screen\n  cls()\n\n  -- make x bigger\n  x = x + 2\n\n  -- circfill( x, y, radius, color )\n  circfill(x, 64, 10, 8)\nend\n```\n\nWe can use an `if` statment to teleport the circle back to start of the screen\n\n```lua\nfunction _init()\n\tx = 10\nend\n\nfunction _draw()\n  -- clear screen\n  cls()\n\n  -- make x bigger\n  x = x + 2\n\n  -- circfill( x, y, radius, color )\n  circfill(x, 64, 10, 8)\n\n  if x \u003e 147 then\n    x = -20\n  end\nend\n```\n\n![[notes/images/diagonal.gif]]\n\n## Draw with loops\n\nA `for` loop allows you to iterate a variables value from one number to another\n\n```lua\nfunction _draw()\n  -- clear screen\n  cls()\n\n  -- will loop i from 1 to 6\n  --\n  -- equivalent to:\n  -- circfill(1*10, 1*10, 1, 1+7)\n  -- circfill(2*10, 2*10, 2, 2+7)\n  -- circfill(3*10, 3*10, 3, 3+7)\n  -- circfill(4*10, 4*10, 4, 4+7)\n  -- circfill(5*10, 5*10, 5, 5+7)\n  -- circfill(6*10, 6*10, 6, 6+7)\n  for i=1,6 do\n    circfill(i*10, i*10, i, i+7)\n  end\nend\n```\n\n![[notes/images/forloop.png]]\n\n### Exercise üçì\n\nCan you recreate this using `clr` , `if`, `for` and shape functions?\n\nYou can refer to the [[notes/Misc/Cheatsheet]] to find code for shapes.\n\n![[notes/images/rainbow_screen.png]]\n\nAnd this\n\n![[notes/images/for_circle.gif]]\n\n## Draw with random\n\nThe function `rnd(n)` will return a random number between 0 and n.\n\n```lua\nfunction _draw()\n  x = rnd(128)\n  y = rnd(128)\n  c = rnd(8)\n\n  circfill(x, y, 8, c+8)\nend\n```\n\n![[notes/images/random_demo.gif]]\n\n### Exercise üçì\n\nTry drawing something fun with random!\n\n## Draw for fun\n\nNow just play with what you've learned to draw whatever you feel like!\n\nDon't forget to refer to the [[notes/Misc/Cheatsheet]] if you need. These are the basic shapes and their functions:\n\n\u003cimg src=\"/notes/images/drawing_reference.png\" alt=\"basic_shapes\" width=\"300\"/\u003e\n\n## Next\n\n‚≠êÔ∏è [[notes/Tutorials/4. Animating with Sin \u0026 Cos]]\n\n\u003chr\u003e\n\n## Appendix\n\nTips\n- You can capture screenshots with `ctrl-6` and gifs with `ctrl-8` then `ctrl-9`. You will see an image popup on the top right that you can right click and save.\n\nCredit\n- The red circle examples and animations were taken from [# Intro to Pico-8 Programming](https://demoman.net/?a=intro-to-lua)","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Tutorials/4.-Animating-with-Sin-Cos":{"title":"4. Animating with the Sin \u0026 Cos","content":"\n‚≠êÔ∏è In this tutorial we will learn how to use `sin` to create movement!\n\n![[notes/images/carsonk_sin_waves.gif]]\n*[Sine Waves by Carson Kompon](https://carsonk.net/works/art/piece?type=OBJKT\u0026id=807017) [(@URL)](https://www.pico-8-edu.com/?c=AHB4YQRBAn-rweLdZ5--Cle-wUt024cc05xySnHLkide4fy8Dx_if4ioc8vxA9313UT2Cm32Bs0rPENSDQyVC08wcd-KjJEewagD9cJEmtfpZX0_8BBx_RRD5UKZ1-VDdN1E1y7EZboSxsfddV182mJzWh8sbUzFOkJPUHuh8lLghWxiYKV-izdYeIQ4OXCivrEpimb3xuZIFwRF44UoccCkd14jaXQERhfGBlebjfm1NvXA2tKZwTsUQXJKvrUa2yNqhqu82d5bLtcGh_r4JeqZdrnc0R5Y8UC03aWpp57CM6ueCDyXLDxGG0_LmsdT_03oebfVxkiVPMZEtBTEcZwkY6dWUZ4lSRW4L2yn0mJ-2Bw7pojlkJxTB93azsKAQEA9oCHimT7odBc8j-3YNQcEzWTtm4VUXGBlbKhu9RPq0jsjQ0EpbTCyZ5apmYEiiDaaIkgmmiKwzJ4KyehSO2cyLbTF-bVyMmoGrhBFWBnbGRs27hmTZWwav86trBV7y93G1shqOTI0m_Z9pJiW7YiInDsRhmk35YfaDZsjoVP0AgqxhQsccYEzuoHZxPYaGLFV6lVTlZZqGg3RhQUpolZfHHpBVZqoEfnhio109QrjaBu50BllJm7giymfDMunSJcV5zbiBtKOUewHu3Qjm8IwI2F_7W5rpMEJK6iOI0vqRmUcsidyCFqhSuFzTB1uRYX1PNUkmYpoMrejhY6gESMJlcXjMg0xjTNfidWFg0ItUnU7a_JKobTKRrEVRKsvojOzXm0ldtGCGJluTbBSKHAGZ8xKBb_IVPi76YRxvWBhmOXylhXTdIFupIhXsaThJ6KxMbCxkS2dcsFQMXYE\u0026g=w-w-w-w1HQHw-w2Xw-w3Xw-w2HQH)*\n\n## Hello Sin Circle\n\nThe function `sin` is very useful because if you feed it time `t()`  it will grow and shrink and grow and shrink forever.\n\nThe value fluctuates from -1 to 1 to -1 to 1.\n\n\u003cimg src=\"/notes/images/sin_wave.png\" alt=\"sin_wave\" width=\"500\"/\u003e\n\nIf we want a bigger value we can multiply it to get a bigger range for example -10 to 10:\n\n`10 * sin(t())`\n\nSo if we use `sin` for the size of a circle, the circle will grow and shrink. \n\nNote that half the time we won't see the cirlce when the size is negative.\n\n```lua\nfunction _draw()\n  -- clear screen\n  cls()\n\n  -- get time value\n  time = t()\n\n  -- size from sin\n  size = 10*sin(time)\n\n  -- circfill( x, y, radius, color )\n  circfill(64, 64, size, 12)\nend\n```\n\n![[notes/images/sin_2.gif]]\n\n## Fast forward and Slow motion\n\nThe circle is moving too fast!!\n\nWe can slow and speed up time by dividing or multiplying it.\n\nSo let's change code to be `time = t() / 2`\n\n```lua\nfunction _draw()\n  -- clear screen\n  cls()\n\n  -- get time value\n  -- divide time by 2 to slow it down\n  time = t() / 2\n\n  -- size from sin\n  size = 10*sin(time)\n\n  -- circfill( x, y, radius, color )\n  circfill(64, 64, size, 12)\nend\n```\n\n![[notes/images/sin_1.gif]]\n\n## Shifting the range\n\nWhat if we want our circle to start from a positive size, let's say go from 10 to 30?\n\nIf we add 1 to sin, instead of -1 to 1 we will get 0 to 2 because `-1 + 1 = 0` and `1 + 1 = 2` \n\nSo let's change our code to be:\n\n `s = sin(time)+1`\n\nIf we divide this by 2 we will get a nice 0 to 1 range:\n\n`s = (sin(time)+1)/2`\n\nNow that we have 0 to 1 we can easily get the range 10 to 30.\n\nLet's make the size go from 0 to 20 by multiplying `s` by 20:\n\n `size = s*20`.\n\nAnd then add 10 to make it from from 10 to 30:\n\n`size = 10 + s*20`\n\n```lua\nfunction _draw()\n  -- clear screen\n  cls()\n\n  -- get time value\n  -- divide time by 2 to slow it down\n  time = t() / 2\n\n  -- change sin range to 0-1\n  s = (sin(time)+1)/2\n\n  -- size from sin shifted to 10-30\n  size = 10 + 20*s\n\n  -- circfill( x, y, radius, color )\n  circfill(64, 64, size, 12)\nend\n```\n\n![[notes/images/sin_0.gif]]\n\n### Exercise üçì\n\nCan you mofiy the code to make the circle change color over time. From red to pink?\n\n![[notes/images/sin_5.gif]]\n\n## Movement with sin\n\nSimilar to how we change scale, we can change position using `sin` and get a looping animation.\n\nFor example if we shift the `sin` range to be from 20 to 100 and pass it as the x and y position of a circle, it will move diagnally in a loop:\n\n```lua\nfunction _draw()\n  -- clear screen\n  cls()\n\n  -- get time value\n  time = t() / 4\n\n  -- change sin range to 0-1\n  s = (sin(time)+1)/2\n\n  -- set pos to sin range 20-100\n  pos = 20 + s*80\n\n  -- draw circle\n  circfill(pos, pos, 8, 12)\nend\n```\n\n![[notes/images/sin_12.gif]]\n\n## Spinning with sin and cos!\n\nSomething cool about `sin` and it's sibling `cos` is that they can create circular motion!\n\nIf you set the x position of a circle to `cos` and the y pos to `sin` you will see it spin in a circle\n  \n  `x = center + radius * cos(time)`\n  `y = center + radius * sin(time)`\n\n```lua\nfunction _draw()\n  -- clear screen\n  cls()\n\n  -- get time value\n  -- divide time by 2 to slow it down\n  time = t() / 4\n\n  -- change sin range to 0-1\n  s = (sin(time)+1)/2\n\n  -- size and color sin\n  size = 8\n  c = 12\n  \n  -- rotate\n  center = 64\n  r = 40\n  \n  x = center + r*cos(time)\n  y = center + r*sin(time)\n\n  -- draw path just because it's nice\n  circ(center,center,r,1)\n\n  -- draw circle\n  circfill(x, y, size, c)\n  \nend\n```\n\n![[notes/images/sin_6.gif]]\n\nNote that you can collapse all the math and get the same visual with just a few rows of code:\n\n```lua\nfunction _draw()\n  -- clear screen\n  cls()\n\n  -- draw path just because it's nice\n  circ(64,64,40,1)\n\n  -- spinning circle\n  x=64+cos(t()/4)*40\n  y=64+sin(t()/4)*40\n  circfill(x,y,8,12)\nend\n```\n\n\n### Exercise üçì\n\nCan you make a solar system or another cool animation using sin and cos?\n\n![[notes/images/sin_11.gif]]\n\n## Next\n\n‚≠êÔ∏è [[notes/Tutorials/5. Color by Position]]\n\n\u003chr\u003e\n\n## Appendix\n\nResources\n- https://pico-8.fandom.com/wiki/Sin\n- https://www.alanzucconi.com/2016/02/03/2d-rotations/","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Tutorials/5.-Color-by-Position":{"title":"5. Color by Position","content":"\n‚≠êÔ∏è In this tutorial we will learn how to create visuals by setting individual pixel colors~\n\n![[notes/images/colortyphoon_1.gif]]\n*[Color Typhoon by Trasevol_Dog](https://trasevol.dog/2017/02/01/doodle-insights-2-procedural-dithering-part-1/) [(@URL)](https://www.pico-8-edu.com/?c=AHB4YQMTAZ3rwc33X188weojvMQbnJ8Fb7DSBtUDxFl0Unt9FBT5_dH5edIPnP8K3Tu06f1x8wQbAgF5GAdFXNdRUr9CVAdR1mVt9Q7liHqQlMBDpM3KULpQv0Je91FaFdVCEHTJOxz5Fm9w2ytEyWlFcZ0DLvTQic2BxYnFkcWNnhpNwvI1JoKRueExNZGhxWRwKLnvLYJ8OCiiC_s0DRY37TC9YfjeaHjbIUkM38Twtks0sFgGm1ERj-cLOxOFASaKZM1ma3YYiYM7g5EikD2RCY5kwi-7x5ed-SWrsCSyMCR-MDcXaCuEogaDWzMzC0Px3MCGUdOZdmJb46SaUR6YrYq1oo-zobWllbY1gSfCrC2P7IcH6nxv68pyZSXv-ZBuNX6NJATaemSn1haK66E6uHEn62RbxNRmBgplJL82uSWKwvVtXRO4Ng_kWCMhRpXwagQlgZqSUHr01D_h9GfB-lJK15hS2qRU_htopSuoiom5xDtVfulANDY_mreVQoDsxPTOdBTpvGgESKDbNtpM8-3sltbD5l5edHM=\u0026g=w-w-w-w1HQHw-w2Xw-w3Xw-w2HQH)*\n\n![[notes/images/weath_munro.gif]]\n*[Wreath by Munro](https://twitter.com/munrohoberman/status/1392102193067552775?s=61\u0026t=NewguUuh6XW-RSDtxxUKQw) [(@URL)](https://pico-8-edu.com/?c=AHB4YQETANM3H-8G2_PR7W_QRLdccoMFTrmlfIK76-Itbr7m6rtOqs85KkkWkpOCohlIJoom8kjlg5uijddIqpGzgsOL4Cn6pUe4fqesT2vfwslr6doLPMBDtP1EmQ7aq3iENn6H0bTrnqGrVld8ULzCXe2VqxPPMFIeYaUpKyV1106M1WU2We4Ua2Fslncwa32jqmCQhlNNtXNcvbCU1gO9YEBVV1XukZ2NqepOCYMpnaAxnYAxnQJnjkXLgiF6RGtXJiqBS0tFtqQRNri1V_ysAg==\u0026g=w-w-w-w1HQHw-w2Xw-w3Xw-w2HQH)*\n\n## Hello Dot\n\nThe `pset( x, y, c)`  function takes in coordinates `x`  \u0026 `y` and what color `c`  the single pixel there should be set to.\n\nFor example we can set the middle most pixel to red:\n\n```lua\nfunction _init()\n  -- clear screen to white (7)\n  cls(7)\n\n  -- set center pixel to red (8)\n  pset(64,64,8)\nend\n```\n\n![[notes/images/pset_dot.png]]\n\nWhat if we go over every pixel in a line and set its color based on the `x` value.\n\nPico-8 only has colors 0-15 but if you pass a higher number it loops back. So 16 will be the color 0, 17 will be the color 1 and so on...\n\n```lua\nfunction _init()\n  cls()\n  \n  for x=0,127 do\n    c = x\n    pset(x,64,c)\n  end\nend\n```\n\n![[notes/images/pset_x.png]]\n\n## Hello Rainbow\n\nOk let's do something more pretty!\n\nIf we divide x by 8 we will get 8px strips of each color.\n\nHere is the math in a table if we loop over all the x values from 0 to 127 and set `c=x/8`\n\n| x     | c       | color number | color       |\n|-------|---------|--------------|-------------|\n|   0   |   1/8   | 0.12 ~ 0     |    black    |\n|   1   |   2/8   | 0.25 ~ 0     |    black    |\n|  *2-7*  |   ...   | .... ~ 0     |    black    |\n|   8   |   8/8   | 1.00 ~ 1     |  dark-blue  |\n|   9   |   9/8   | 1.12 ~ 1     |  dark-blue  |\n| *9-126* |   ...   | ....         |     ...     |\n|  127  |  127/8  | 15.87 ~ 15   | light-peach |\n\n\u003cbr\u003e\n\n``` lua\nfunction _init()\n  cls()\n\n  for x=0,127 do\n    for y=0,127 do\n      -- divide x by 8 \n      -- to get 8px strips\n      c = x / 8\n      pset(x,y,c)\n    end\n  end\nend\n```\n\n![[notes/images/pset_rainbow.png]]\n\nWe can get a diagonal rainbow by adding `y` to the equation:\n\n`c = (x + y) / 16`\n\n![[notes/images/pset_x_plus_y.png]]\n\n### Exercise üçì\n\nYou can get some interesting patterns by using x and y in different ways to set the color.\n\nTry multiplying x by a value:\n\n`c = (3*x + y) / 16`\n\nor\n\n`c = (x*x + y*y) / 16`\n\n![[notes/images/pset_sqr.png]]\n\n## Dithering\n\nA cool effect that's used a lot is setting the color of a bunch of random pixels instead of _all_ the pixels. For this effect, you don't want to clear the screen so that the frames look like they're blending.\n\nFor example if we take an equation similar to the previous section that changes over time and set random pixels instead of all the pixels it will look fuzzy:\n\n```lua\nfunction _draw()\n  for i=0,4000 do\n    x = rnd(128)\n    y = rnd(128)\n    c = (x/16+y/32+t())%6+8\n    pset(x,y,c)\n  end\nend\n```\n\n![[notes/images/dithering.gif]]\n\nWe can also use this method to set random pixels to black instead of clearing the screen.\n\n```lua\nfor i=0,1600 do\n  x = rnd(128)\n  y = rnd(128)\n  pset(x,y,0)\nend\n```\n\nIf we take our spinning circle example from [[notes/Tutorials/4. Animating with Sin \u0026 Cos]] and do this, we can see the effect.\n\n```lua\nfunction _init()\n  cls()\nend\n  \nfunction _draw()\n  -- clear screen by setting random pixels to black\n  for i=0,1600 do\n    x = rnd(128)\n    y = rnd(128)\n    pset(x,y,0)\n  end\n\n  -- spinning circle\n  x=64+cos(t()/4)*40\n  y=64+sin(t()/4)*40\n  circfill(x,y,8,12)\nend\n```\n\n![[notes/images/pset_dither.gif]]\n\nWhat if we set the pixel to a random color between 0 and 2 instead of black?\n\n`pset(x,y,rnd(3))`\n\n![[notes/images/pset_dither_rnd.gif]]\n\n### Exercise üçì\n\nTo get the dithering effect you need to have something moving on the screen. Start by creating an animated visual using `sin` or other methods and then add the dither clear code to get the dithering!\n\nTry to play around with different colors too~\n\n![[notes/images/dither_circle.gif]]\n\n## Burning\n\nAnother cool dithering is to take a pixel color and bump it down to another color. For example if we take this series of colors that eventually ends in black, we can get a cool fire effect!\n\n\u003cdiv class=\"pico8-palette\"\u003e\n\u003cdiv class=\"p8-10\"\u003e10\u003c/div\u003e\u003cdiv class=\"p8-9\"\u003e9\u003c/div\u003e\u003cdiv class=\"p8-8\"\u003e8\u003c/div\u003e\u003cdiv class=\"p8-4\"\u003e4\u003c/div\u003e\u003cdiv class=\"p8-2\"\u003e2\u003c/div\u003e\u003cdiv class=\"p8-0\"\u003e0\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cbr\u003e\n\u003cbr\u003e\n\n```lua\nfunction _init()\n  cls()\nend\n\nfunction _draw()\n  -- spinning circle\n  x=64+sin(t())*30\n  y=64+cos(t())*30\n  circfill(x,y,4,10)\n\n  -- burn effect\n  for i=0,3000 do\n    x=rnd(128)\n    y=rnd(128)\n\n    -- get pixel color and bump it down to the next value\n    c=pget(x,y)\n    if c == 10 then\n      c = 9\n    elseif c == 9 then\n        c = 8\n    elseif c == 8 then\n        c = 4\n    elseif c == 4 then\n        c = 2\n    elseif c == 2 then\n        c = 0\n    end\n\n    circ(x,y,1,c)\n  end\nend\n```\n\n![[notes/images/burn_0.gif]]\n\n### Exercise üçì\n\nYou can achieve a lot of cool effects with burn and it's a great way to get familiar with the palette. Try to create a natural plant growing effect by randomly setting some neighbor values and burning from lush down to nothing~\n\n## Next\n\n‚≠êÔ∏è [[notes/Tutorials/6. Particles]]\n\n\n\u003chr\u003e\n\n## Appendix\n\nResources\n- [\"Doodle Insights: Procedural Dithering Tutorial\" by Trasevol Dog](https://trasevol.dog/2017/02/01/doodle-insights-2-procedural-dithering-part-1/)","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Tutorials/6.-Particles":{"title":"6. Particles","content":"\n‚≠êÔ∏è In this tutorial we will learn how to create visuals by updating a bunch of particles~\n\n![[notes/images/fireworks_1.gif]]\n*[Fireworks by Trasevol_Dog](https://trasevol.dog/2017/04/04/doodle-insights-11-particles/) [(@URL)](https://pico-8-edu.com/?c=AHB4YQQZAgXrwdmXP8Hh7-ACzfmPsFEGb1AeH0YnjV8fBcUL5NH5L5E8w8ADDHQP0aYPEDdPsBEETZmOHPgWpx11XnFbcZoDdl7DUg9w3BO05y0MNnkYBQ-xFmNZWo2_RbfZjW5Fi2tdPzZWDh53XZ-29V7TlknfJ-FiEHexzECcOeLAlQNnXDDauG3WbYE37JFPeGZhZ3QjLh5iZmWgsmx76OqVljbMgHDA2sioXQe23awhGK5kguFQIxpJktndUIfMNGtVubC3lo3ZcXquCqs5y6xatq2CsqtX3Tg0KFwSNHZdsktg552mlhC4cXBzIc4nXI-UVdHOiOu1ojQwuZmUamO_RyuNElhfcSK5ZJut5eHEPoKlw0bcbJccFyRCCzNLq76zpfuafCEZlUrP4JVu1FErBqXWoZxOTfFpCbrESs2a-kOuHzgz45ZJ1WVpqE1FtbDY3ir11Le3N7pprdVOLG2wGshaJ0km9EnhndB6m2nntqjz02KT_Wox0VA9sw9mF72nHRFthdNTIwJp4igeCZqtPb2nYQO0ivVJotl9vVqFmKEskKobWMsSgaaNjYV20shRsdTMBOLtKcSQ1Ss8EzVBsjaoPr043C40k-nImvx41CaSyg2iBOmMOj1GpAe7zXBoSnv8WgzlV-WDW-lxKO6-MiabQ4bRrlGsckLtlF4fHQ==\u0026g=w-w-w-w1HQHw-w2Xw-w3Xw-w2HQH)* \n\n## Hello Table\n\nIn order to create particles we need to learn about [tables](https://pico-8.fandom.com/wiki/Tables).\n\nTables are like lists that you can add and remove *stuff* from. They are defined using curly brackets. They are similar to arrays in other programming languages. Note that Lua arrays are 1-based by default, not 0-based. FOREACH starts at TBL[1], not TBL[0].\n\nFor example we can have a table of numbers and loop through them using `all`:\n\n```lua\ncls()\n\n-- create table with some values\nt = {2, 3, 5, 7, 11}\n\n-- add an additional value\nadd(t, 14)\n\n-- loop through values in table\nfor v in all(t) do\n  print(v)\nend\n\n-- access first value by index\n-- note that lua starts from 1 instead of 0\nprint(v[1])\n```\n\nTables can also be used to store *fields*. These are just named values that you can reference.\n\nFor example we can store some values in a table and then use them to draw a circle:\n\n```lua\ncls()\n\n-- create a table with some properties\nmy_circ = {\n  x = 30,\n  y = 40,\n  size = 10,\n  color = 8\n}\n\n-- draw cirlce by using table fields\ncircfill(\n  my_circ.x,\n  my_circ.y,\n  my_circ.size,\n  my_circ.color\n)\n```\n\n## Hello Particles\n\nOk now that we know about tables, let's make some particles dance!\n\n### Rain\n\nLet's try to get a rain effect by making particles move from the top of the screen to the bottom.\n\nWe are going to have particles that have position, velocity, color, size and time:\n\n```lua\nfunction _init()\n  particles={}\nend\n\nfunction create_particle(x,y)\n  spd=1+rnd(1)\n\n  p={\n    x=x,\n    y=y,\n    vx=0,\n    vy=spd,\n    c=rnd(8)+8,\n    s=rnd(3),\n    t=0\n  }\n\n  add(particles,p)\nend\n```\n\nWe will then have a function that updates our particle by changing its position based on the velocity and deletes the particles when it passes the bottom of the screen:\n\n```lua\nfunction update_particle(p)\n  p.y+=p.vy\n  \n  if p.y \u003e 128 then\n    del(particles,p)\n  end\nend\n```\n\nLastly we will have a function that draws our particle, in this case we'll represent it as a circle:\n\n```lua\nfunction draw_particle(p)\n  circ(p.x,p.y,p.s,p.c)\nend\n```\n\nNow let's put these functions into update and draw to get things going. We will create a particle each update at the top of the screen:\n\n```lua\nfunction _draw()\n  cls()\n  \n  create_particle(rnd(128),-5)\n\n  for pt in all(particles) do\n    update_particle(pt)\n    draw_particle(pt)\n  end\n\n  -- print particle count\n  print(#particles,0,0,8)\nend\n```\n\nIf you put all this code together you should get something like this:\n\n![[notes/images/simple_particles_2.gif]]\n\n### Burst\n\nAlternatively we could move the particles outwards to create a burst effect:\n\nCreate:\n```lua\nparticles={}\n\nfunction create_particle(x,y)\n  -- velocity in random direction and speed\n  spd=1+rnd(3)\n  a=rnd(1)\n  vx = spd*cos(a) \n  vy = spd*sin(a)\n\n  local p={\n    x=x,\n    y=y,\n    vx=vx,\n    vy=vy,\n    c=rnd(8)+8,\n    s=rnd(3),\n    t=0\n  }\n\n  add(particles,p)\nend\n```\n\nUpdate:\n```lua\nfunction update_particle(p)\n  -- update position\n  p.x+=p.vx\n  p.y+=p.vy\n\n  -- slow down the particle\n  p.vx*=0.9\n  p.vy*=0.9\n\n  -- update time and delete if old\n  p.t+=0.05\n  if p.t\u003e1 then\n    del(particles,p)\n  end\nend\n```\n\nDraw and update:\n```lua\nfunction draw_particle(p)\n  circ(p.x,p.y,p.s,p.c)\nend\n\nfunction _draw()\n  cls()\n  create_particle(64,64)\n\n  for pt in all(particles) do\n    update_particle(pt)\n    draw_particle(pt)\n  end\nend\n```\n\nResult:\n\n![[notes/images/particles_1.gif]]\n\nYou can load the code into pico-8-edu using this [URL](https://www.pico-8-edu.com/?c=AHB4YQLZAW8CAC5Mji5tjK1srmevT0HBrM5tjC7tzQ1kTK4sjA7g6oPdO-0Q_y8xv7AbXBAUD5He-wSXn-8Obdi8QfIMxzfnl4_QNV0Xy4b5IXqHZ2iCTCtAJiDN3ZCcd9NBaV4NXbVj6rQ0TGl4rCwNRFIhF_2sbMRpGxofM8asVgaMsWTsmfotvBAGfVNsGSltCqMtRE3iyaBJElcOSA7dlu8k1uv9tBK5bys8yxWvIS8yshTMiCIPbJQjYzOdMHqeIkuE0VfIogR3zWz0UbRSeWnGS0FrrKbZ6ia687wWes1YI60vquNElfKdBS3VbG3rGeYWsmipWHuHZqipDNPGi6Un9BfSd1AOuXKzHsjbWv9oLBmVK2cWCJZ4JJBzRxMPvIVmeRfyKFkULlgULPDAhg8asXMPq51FekGK8D3xxCxJBJlGhsp8c0QPpl8QI89oNRFKNEmmH5lKudTGo1KiNVYN5NLi-61rXmFxAQ==\u0026g=w-w-w-w1HQHw-w2Xw-w3Xw-w2HQH).\n\n### Exercise üçì\n\nTry messing around with the variables to see how the particles change. Can you get a different effect by changing how the particles behave?\n\n## Next\n\n‚≠êÔ∏è [[notes/Tutorials/7. Useful Pico-8 Features]]\n\n\n\u003chr\u003e\n\n## Appendix\n\nResources\n- [\"Doodle Insights: Particles\" by Trasevol Dog](https://trasevol.dog/2017/04/04/doodle-insights-11-particles/)","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Tutorials/7.-Useful-Pico-8-Features":{"title":"7. Useful Pico-8 Features","content":"\n‚≠êÔ∏è In this tutorial we will learn some useful features that Pico-8 has~\n\n## Pal\n\nChange your color palette.\n\n- https://pico-8.fandom.com/wiki/Pal\n\n## Input\n\nButton and mouse input for interactivity\n\n- https://pico-8.fandom.com/wiki/Btn\n- https://pico-8.fandom.com/wiki/Btnp\n- https://pico-8.fandom.com/wiki/Stat#{30%E2%80%A639}_Mouse_and_Keyboard\n\n## Lerp\n\nSmooth transitions between values \n\n- https://demoman.net/?a=animation-code-part-1\n\n## P8SCII\n\nPico-8's special characters\n\n- https://pico-8.fandom.com/wiki/P8SCII\n\n## Fillp\n\nChange your fill pattern\n\n- https://pico-8.fandom.com/wiki/Fillp\n\n\n","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null},"/notes/Tutorials/8.-Study-some-Examples":{"title":"8. Study some Examples","content":"\n‚≠êÔ∏è In this tutorial we will analyze some cool examples to learn how they work~\n\n\u003e TODO\n","lastmodified":"2023-03-02T22:34:12.177438818Z","tags":null}}